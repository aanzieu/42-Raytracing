/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: svilau <marvin@42.fr>                      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/10/20 10:49:50 by svilau            #+#    #+#             */
/*   Updated: 2017/03/17 14:07:23 by svilau           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/rtv1.h"
#include "../libft/libft.h"
#include "./cuda/cudaheader/gpu_rtv1.cuh"
#include "../frameworks/SDL2.framework/Headers/SDL.h"

/*
** Get the top-left point in virtual space of the viewplane
*/

t_vec3d	new_vector(double x, double y, double z)
{
	t_vec3d	var;

	var.x = x;
	var.y = y;
	var.z = z;
	return (var);
}

void	add_sphere_tmp(t_sphere **spheres, double radius, t_vec3d pos)
{
	t_sphere *new_sphere;
	t_sphere *tmp;

	tmp = *spheres;
	new_sphere = malloc(sizeof(t_sphere));
	new_sphere->radius = radius;
	new_sphere->pos = pos;
	new_sphere->next = NULL;

	if (!tmp)
		*spheres = new_sphere;
	else
	{
		while (tmp->next)
			tmp = tmp->next;
		tmp->next = new_sphere;
	}
}

void	data_setup(t_world *world)
{
	world->spheres_len = 1;
	world->planes_len = 1;
	world->cones_len = 1;
	world->cylinders_len = 1;
	world->lights_len = 1;
	
	world->viewplane.width = 0.28;
	world->viewplane.height = 0.28;
	world->viewplane.x_res = 400;
	world->viewplane.y_res = 400;
	world->viewplane.x_indent = world->viewplane.width /
									(double)world->viewplane.x_res;
	world->viewplane.y_indent = world->viewplane.height /
									(double)world->viewplane.y_res;
	world->viewplane.dist = 1;
	world->line = 0;
	world->camera.pos = new_vector(0, 0, 0);
	//world->camera.to = new_vector(0, 0, 1);
	world->camera.dir_v = new_vector(0, 0, 1);
	world->camera.up_v = new_vector(0, 1, 0);
	world->camera.right_v = new_vector(1, 0, 0);
	world->spheres = (t_sphere*)malloc(sizeof(t_sphere) * 1);
	world->planes = (t_plane*)malloc(sizeof(t_plane) * world->planes_len);
	world->cones = (t_cone*)malloc(sizeof(t_cone) * world->cones_len);
	world->cylinders = (t_cylinder*)malloc(sizeof(t_cylinder) * world->cylinders_len);
	world->lights = (t_light*)malloc(sizeof(t_light) * world->lights_len);

	world->spheres[0].radius = 0.2;
	world->spheres[0].pos.x = 0.5;
	world->spheres[0].pos.y = 0;
	world->spheres[0].pos.z = 7;

	// world->spheres[1].radius = 0.1;
	// world->spheres[1].pos.x = 0.1;
	// world->spheres[1].pos.y = 0;
	// world->spheres[1].pos.z = 6;

	// world->spheres[2].radius = 0.1;
	// world->spheres[2].pos.x = -0.2;
	// world->spheres[2].pos.y = 0;
	// world->spheres[2].pos.z = 5;

	world->lights[0].pos.x = 1;
	world->lights[0].pos.y = 0;
	world->lights[0].pos.z = 5;

	world->planes[0].pos.x = 0;
	world->planes[0].pos.y = -0.5;
	world->planes[0].pos.z = 1;
	world->planes[0].up.x = 0;
	world->planes[0].up.y = 0;
	world->planes[0].up.z = 1;

	world->cones[0].pos.x = 0;
	world->cones[0].pos.y = 0;
	world->cones[0].pos.z = 7;
	world->cones[0].up.x = 0;
	world->cones[0].up.y = 1;
	world->cones[0].up.z = 7;
	world->cones[0].half_angle = 20;

	world->cylinders[0].pos.x = 0;
	world->cylinders[0].pos.y = 0;
	world->cylinders[0].pos.z = 7;
	world->cylinders[0].up.x = 0;
	world->cylinders[0].up.y = 1;
	world->cylinders[0].up.z = 7;
	world->cylinders[0].radius = 0.1;

	// world->planes[1].pos.x = -0.2;
	// world->planes[1].pos.y = -0.4;
	// world->planes[1].pos.z = 1;
	// world->planes[1].up.x = 0;
	// world->planes[1].up.y = 0;
	// world->planes[1].up.z = 1;
	

	// add_sphere_tmp(&world->spheres, 0.1, new_vector(0, 0, 7));
	// world->spheres[0].radius = 0.1;
	// world->spheres[0].pos = new_vector(0, 0, 7);
	t_color sphere_c;
	t_color plane_c;

	sphere_c.r = 255;
	sphere_c.g = 0;
	sphere_c.b = 0;
	world->spheres[0].color = sphere_c;
	// world->spheres[2].color = sphere_c;	
	plane_c.r = 255;
	plane_c.g = 0;
	plane_c.b = 255;
	world->planes[0].color = plane_c;
	world->cones[0].color = plane_c;
	world->cylinders[0].color = plane_c;	
	// world->planes[1].color = plane_c;
	
	
}

/*
**	Set the game in fullscreen
**	SDL_SetWindowFullscreen(window, SDL_WINDOW_FULLSCREEN_DESKTOP);
*/

// void	render_handler(t_world *world)
// {
// 	int			*a_h;
// 	size_t			size;
// 	// if (world->render_type == "cpu")
// 	//render(world);
// 		// exit(0);
// 	// else
// 	size = world->viewplane.x_res * world->viewplane.y_res * sizeof(int);
// 	if (!(a_h = malloc(size)))
// 		return ;
// 	ft_bzero(a_h, size);
// 	render_cuda(a_h, world->viewplane.x_res, world->viewplane.y_res, *world, 1);	
// 		//printf("HAHA%d\n", a_h[0]);
// 		free(a_h);
// }


/*
**	Initialize SDL and start listening to events
**	On event receive send data to handler
*/

void	rtv1(t_world *world)
{
	SDL_Event		event;
	int				quit;
	int				*a_h;
	size_t			size_main;

	quit = 0;
	if (SDL_Init(SDL_INIT_VIDEO) == -1)
		return ;
	world->window.id = SDL_CreateWindow("Rtv1 v0.9.1", 100, 100, WIN_WIDTH,
								WIN_HEIGHT, 0);
	world->window.screen = SDL_GetWindowSurface(world->window.id);
	size_main = world->viewplane.x_res * world->viewplane.y_res * sizeof(int);
	if (!(a_h = malloc(size_main)))
		return ;
	ft_bzero(a_h, size_main);
	while (quit == 0)
	{
		SDL_PollEvent(&event);
		quit = event_handler(world, event);
		render_cuda(a_h, world->viewplane.x_res, world->viewplane.y_res, *world, 0);
		// render_handler(world);
		// exit(0);
		SDL_UpdateWindowSurface(world->window.id);
	}
	render_cuda(a_h, world->viewplane.x_res, world->viewplane.y_res, *world, 1);
	free(a_h);
	SDL_FreeSurface(world->window.screen);
	SDL_DestroyWindow(world->window.id);
}

/*
** DEBUG TO FILE
**	int fd;
**	FILE *saved = stdout;
**	stdout = fopen("log.txt", "w+");
*/

/*
**	DO NOT FORGET
**	Change argument number to 2 and handle file input
*/

int		main(int argc, char **argv)
{
	t_world	*world;

	if (argc == 2)
	{
		if (!(world = (t_world*)malloc(sizeof(t_world) * 1)))
			memory_allocation_error();
		data_setup(world);
		// parse_rtv1(world, argv[1]);
		rtv1(world);
		free_world(world);
	}
	else
		ft_putstr("Usage: ./rtv1 filename.xml\n");
	SDL_Quit();
	return (0);
}
